<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jee="http://www.springframework.org/schema/jee"
       
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx.xsd
            http://www.springframework.org/schema/mvc
            http://www.springframework.org/schema/mvc/spring-mvc.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop.xsd
            http://www.springframework.org/schema/jee
        http://www.springframework.org/schema/jee/spring-jee.xsd">
    
    <!-- properties files location -->
    <bean id="propertyConfigurer" class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
            </list>
        </property>
    </bean>
    
    <!--<context:property-placeholder location="classpath:jdbc.properties"/>-->

    <!-- annotation configuration scanning -->
    <!--<context:annotation-config/>-->
    
    <context:component-scan base-package="rugal">
        <!--
        <context:exclude-filter type="" expression=""/>
        <context:include-filter type="" expression=""/>
        -->
    </context:component-scan>

    <!-- Do JSON data convertion -->
    <!--<bean id="messageConverters" class="rugal.common.springmvc.converter.json.GsonHttpMessageConverter">-->
    <bean id="messageConverters" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>application/json;charset=UTF-8</value>
                <value>text/javascript;charset=utf-8</value>
            </list>
        </property>
    </bean>
    
    <jee:jndi-lookup id="dataSource"
                     jndi-name="java:jboss/datasources/ExampleDS"
                     expected-type="javax.sql.DataSource" />
    
    <!-- Hibernate session factory -->
    <bean name="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="packagesToScan">
            <list>
                <value>rugal.sample.core.entity</value>
                <!--<value>rugal.core.entity</value>-->
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
                <!--<prop key="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</prop>-->
                <prop key="hibernate.dialect">org.hibernate.dialect.H2Dialect</prop>
<!--                <prop key="hibernate.connection.datasource">java:jboss/datasources/ExampleDS</prop>-->
                <!--<prop key="current_session_context_class">thread</prop>-->
                <!--<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>-->
                <!--<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>-->
                <prop key="hibernate.connection.autocommit">false</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">create-drop</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <prop key="hibernate.cache.use_query_cache">true</prop>
                <prop key="hibernate.jdbc.use_get_generated_keys">true</prop>
                <prop key="hibernate.cache.infinispan.statistics">true</prop>
                <prop key="hibernate.generate_statistics">true</prop>
                <prop key="hibernate.cache.infinispan.cachemanager">java:jboss/infinispan/container/hibernate</prop>
                <prop key="hibernate.cache.region.factory_class">infinispan</prop>
                <prop key=""></prop>
<!--                <prop key="hibernate.cache.region.factory_class">org.infinispan.hibernate.cache.v53.InfinispanRegionFactory</prop>-->
            </props>
        </property>
    </bean>


    <!-- transaction manager -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>
    
    <tx:annotation-driven/>
    <!-- transaction manager advisor -->
    <tx:advice id="txAdvice">
        <tx:attributes>
            <tx:method name="find*" read-only="true" />
            <tx:method name="get*" read-only="true" />
            <tx:method name="count*" read-only="true" />
            <tx:method name="*" />
        </tx:attributes>
    </tx:advice>

    <!-- AOP transaction inserter -->
    <aop:config>
        <aop:pointcut id="txPointcut" expression="execution(* rugal.sample.core.service.impl..*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
    </aop:config>
</beans>
